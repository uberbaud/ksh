# <@(#)tag:csongor.greyshirt.net,2018-02-08:tw/20.12.04z/1b4f09d>
# vim: filetype=ksh tabstop=4 textwidth=72 noexpandtab nowrap

#: FUNCTION ^Uvarname^u
#:   Shows information about ^Uvarname^u.

showvar() {
	set -- "$@" "$?" "$-" "$_" # save special variables
	(($#!=4))&& die 'Expected exactly one (1) variable name.'
	( # use a subshell so we can alter variables (REPLY)
	case "$1" in
		\@|\*|\#|[1-9])
			die 'Cannot access parent argument list.';	;;
		\_)
			sparkle <<-==SPARKLE==
			  ^B$1^b is a ^Bspecial^b variable whose value is
			    1. the last word of previous command,
			    2. the path of the executed command, or
			    3. the name of the file in ^SMAILPATH^s that changed.
			==SPARKLE==
			return
			;;
		@(\?|-|!|$|0))
			case $1 in
				\?)	set -- "$1" "$2";					;;
				-)	set -- "$1" "$3";					;;
				!)	set -- "$1" "$!";					;;
				$)	set -- "$1" "$$";					;;
				0)	set -- "$1" "$0";					;;
				_)	set -- "$1" "$4";					;;
				*) die 'Bad programmer (2nd case).';	;;
			esac
			sparkle <<-==SPARKLE==
			  ^B$1^b is a ^Bspecial^b variable with a value of:
			    $2
			==SPARKLE==
			return
			;;
		PWD)
			desparkle "$PWD"
			sparkle <<-==SPARKLE==
			  ^BPWD^b is a ^Bspecial^b variable whose value is set to
			    the working directory by the shell. Current value is
			      $REPLY
			==SPARKLE==
			return
			;;
		RANDOM)
			sparkle <<-==SPARKLE==
			  ^BRANDOM^b is a ^Bspecial^b variable whose value is
			    randomly generated (e.g. ^S$RANDOM^s).
			==SPARKLE==
			return
			;;
	##############################################################
	# the v & e cases are so we can use those in the general case
	# without overwriting the variable we are inspecting
	##############################################################
		v)
			local V e
			set -- # clear parameter array
			for V in $(typeset +|egrep '^v(\[[0-9]+\])?$'); do
				eval "e=\"\${$V}\""
				set -- "$@" "$V" "$e"
			done
			(($#))|| die "Variable is not set."
			set -- "$(typeset|egrep ' v$')" "$@"
			;;
		e)
			local v E
			set -- # clear parameter array
			for v in $(typeset +|egrep '^e(\[[0-9]+\])?$'); do
				eval "E=\"\${$v}\""
				set -- "$@" "$v" "$E"
			done
			(($#))|| die "Variable is not set."
			set -- "$(typeset|egrep ' e$')" "$@"
			;;
		*)
			[[ $1 == [A-Za-z_]*([A-Za-z0-9_]) ]]|| {
				desparkle "$1"
				die "^B$REPLY^b does not look like a variable name."
			  }
			local v e
			set -- "$1" # clear but save variable name for later
			for v in $(typeset +|egrep "^$1(\[[0-9]+\])?\$"); do
				eval "e=\"\${$v}\""
				set -- "$@" "$v" "$e"
			done
			(($#==1))&& # 1, not 0, becaue we saved the variable name
				die "Variable is not set."
			v="$(typeset|egrep " $1\$")"
			shift # remove variable name
			set -- "$v" "$@"
			;;
	esac
	varname="${1##* }"
	integer ndx=-1 scrcol=1 noun=0
	function @decl { #{{{1
		local decl num type=scalar tlen=6
		decl="${1% *}"			# remove name
		decl="${decl#typeset}"	#remove keyword (which might be all that's left
		decl="${decl# }"		#remove leading space if it exists

		[[ $decl == *'-i'* ]]&& { type="integer"; tlen=7; }
		[[ $decl == *'-U'* ]]&& { type="unsigned integer"; tlen=16; }

		[[ $decl == *'-r'* ]]&& { attr[++ndx]="readonly";   atlen[ndx]=8; }
		[[ $decl == *'-x'* ]]&& { attr[++ndx]="exported";   atlen[ndx]=8; }
		[[ $decl == *'-t'* ]]&& { attr[++ndx]="tagged";     atlen[ndx]=8; }
		[[ $decl == *'-l'* ]]&& { attr[++ndx]="lowercase";  atlen[ndx]=9; }
		[[ $decl == *'-u'* ]]&& { attr[++ndx]="uppercase";  atlen[ndx]=9; }
		[[ $decl == *'-Z'* ]]&& { attr[++ndx]="zero padded";atlen[ndx]=11;}
		noun=$((++ndx))
		attr[noun]="$type"
		atlen[noun]="$tlen"
		[[ $decl == *'-L'* ]]&& {
			num="${decl#*-L}"; num="${num%% *}"
			attr[++ndx]="left justified to $num bytes"
			atlen[ndx]=$((24+${#num}))
		  }
		[[ $decl == *'-R'* ]]&& {
			num="${decl#*-R}"; num="${num%% *}"
			attr[++ndx]="right justified to $num bytes"
			atlen[ndx]=$((25+${#num}))
		  }
	} #}}}1
	function @newline { #{{{1
		local pad="${1:-}"
		print -n -- "\n$pad"
		scrcol=$((${#pad}+1)) # we moved one (1) past the padding
	} #}}}1
	function @prnstr { #{{{1
		integer len=$1
		if ((scrcol+len+1>COLUMNS)); then
			@newline '    '
		elif ${3:-true}; then
			print -n ' '
			((scrcol++))
		fi
		print -n -- "$2"
		((scrcol+=len))
	} #}}}1
	function @prnattr { #{{{1
		integer i=0
		while ((i<=ndx)); do
			@prnstr ${atlen[i]} "${attr[i]}"
			((i++))
		done
	} #}}}1
	@decl "$1"; shift
	@prnstr $((5+${#varname})) "  \033[1m$varname\033[22m is" false

	if [[ $1 == *\] ]]; then
		attr[noun]="${attr[noun]}s"
		((atlen[0]++))
		@prnstr 11 'an \033[1marray\033[22m of'
		@prnattr
		s='s'; S=14
		slots=$(($#/2))
		((slots==1))&& { s=''; S=13; }
		@prnstr 1 ',' false
		@prnstr $((12+${#slots})) "with \033[1m$slots\033[22m slot$s."
	else
		@prnstr 1 a
		[[ $1 == [aeiou]* ]]&& @prnstr 1 n false
		@prnattr
		@prnstr 16 "with a value of:"
	fi
	@newline
	typeset -R4 -i K=0
	while (($#)); do
		k="$1" v="$2"
		if [[ $k == *\] ]]; then
			k="${k#*\[}"
			K="${k%\]}"
			print -n "$K) "
		else
			print -n '    '
		fi
		eval "v=\"\${$1}\""
		qvis "$v"
		shift 2
	done
)}

# Copyright Â© 2018 by Tom Davis <tom@greyshirt.net>.
