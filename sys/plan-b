#!/bin/ksh
# <@(#)tag:tw.csongor.greyshirt.net,2017-12-04,23.28.15z/2cb94ce>
# idea from anacron

NAME=plan-b
HOLD=/var/cache/$NAME
JOBFNAME=${NAME}-tab
JOBF=/etc/$JOBFNAME
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
SPTAB=' 	'

set -u
integer ERRS=0
integer LINENO
function error		{ print -ru2 "$NAME: $1"; }
function syntax		{ error "syntax: $* (line $LINENO)"; ((ERRS++)); }
function fullstop	{ error "$*"; exit 1; }

(($#))&& {
	${PAGER:-more} <<-\
	===
    PLANB

    $NAME is designed to be run from the root crontab (perhaps every
    five (5) minutes or so), and is useful on laptops or other machines
    which are not powered on constantly, and so which might miss an
    exact time.

    $NAME expects a job file ($JOBF) containing directives and
    possibly blank lines and comments. $NAME will also check for
    user job files at /home/*/.$JOBFNAME and will run any jobs therein
    as the user name given after /home/ in the user job file path.

    Comments are lines whose first non-space character is an octothorpe
    ('#', aka 'pound sign').

    Directives are of the form INTERVAL (space) COMMAND.

    The INTERVAL can be one of a WEEKDAY-NAME (e.g. Monday, only the
    first two characters are considered), DAY-OF-MONTH (an ordinal
    number, e.g. 1st, 2nd, 23rd, etc), or a NUMBER-OF-DAYS (e.g. 1).

    The COMMAND is everything after the intervening blank and can itself
    contain spaces.

    Example:
    # My excellent $NAME config file
    1       /usr/sbin/syspatch -c
    1       /bin/sh /etc/daily
    Mon     /bin/sh /etc/weekly
    1st     /bin/sh /etc/monthly

    When run, $NAME will check every directive in the job file, and for
    any directive whose INTERVAL has passed, $NAME will run that
    COMMAND.

    $NAME maintains state with files it creates in $HOLD.

    $NAME sets the PATH to
        $PATH

    $NAME uses the local time ($TZ) for date comparisons.

    $NAME was inspired by the ANACRON utility, but is intentionally 
    simpler.
	===
	exit 0
}

[[ $(id -un) == root ]]|| fullstop 'needs root privileges'
[[ -a $JOBF ]]|| fullstop "$JOBF not found"
[[ -f $JOBF ]]|| fullstop "$JOBF is not a file"
[[ -d $HOLD ]]|| mkdir -p $HOLD || fullstop "cannot make $HOLD"
cd $HOLD || fullstop "cannot cd to $HOLD"

#               ┌─date─┐ ┌─time─┐ ┌┬─seconds since epoch
set -- $(date +'%Y %m %d %H %M %S %s')
typeset -Z2 MON DOM H M S # zero padded vars of width 2
YEAR=$1;    MON=$2;     DOM=$3
H=$4;       M=$5;       S=$6
UNIXTM=$7
TODAY=$YEAR$MON$DOM
END_OF_TODAY=$((UNIXTM-(((H*60)+M)*60)+S))
SECS_IN_DAY=$((24*60*60))

function have-x-days-passed {
	local nextrunE
	nextrunE=$((LAST_RUN_TS+($1*$SECS_IN_DAY)))
	((nextrunE <= END_OF_TODAY))
}
function has-dow-passed {
	local pass tsdow x
	tsdow=$2
	case $1 in
		mo*)	pass=1;	;;
		tu*)	pass=2;	;;
		we*)	pass=3;	;;
		th*)	pass=4;	;;
		fr*)	pass=5;	;;
		sa*)	pass=6;	;;
		su*)	pass=7;	;;
	esac
	x=$(((pass+7-tsdow)%7)); ((x))||x=7
	have-x-days-passed $x
}
function has-dom-passed {
	typeset -i10 -Z2 dom=10#$1
	typeset -i10	 year=10#${2%??}
	typeset -i10 -Z2 mon=10#${2#$year}
	((++mon>12))&& { ((year++)); mon=1; }
	(($year$mon$dom <= TODAY))
}
function do-execute {
	local tsF ts tsdow when=$1 cmd=$2 as=$3
	# name of timestamp file
	tsF="$(print -n "${as:+$as-}$when-$cmd" | tr ' /' '_%')"
	[[ -f $tsF ]]&& {							# if it exists
		ts=$(<$tsF)								# get the last run time
		set -- $(date -j +'%s %u' $ts'0000')
		LAST_RUN_TS=$1			# seconds since epoch of last run time
		tsdow=$2				# weekday when command was last run
		case $when in
			+([0-9]))
				have-x-days-passed $when				|| return 0
				;;
			@(su|mo|tu|we|th|fr|sa)*)
				has-dow-passed $when $tsdow				|| return 0
				;;
			@([0-9]|[012][0-9]|3[01])@(st|nd|rd|th))
				has-dom-passed ${when%??} "${ts%??}"	|| return 0
				;;
			+([0-9])@(st|nd|rd|th))
				syntax 'day of month is too big'
				;;
			*)
				fullstop 'This should be impossible.'
				;;
		esac
	  }
	print $TODAY>$tsF			# write the new timestamp to the file
	eval "${as:+doas -u $as }$cmd"
}

typeset -l when
function do-one-plan-b {
	local as=${1-}
	LINENO=0
	while IFS=$SPTAB read -r when cmd; do
		((LINENO++))
		[[ ${when:-#} == \#* ]]&& continue		# comments and blank lines
		[[ -n ${cmd:-} ]]|| { syntax "no command or garbled"; continue; }
		[[ $when == @(+([0-9])?(st|nd|rd|th)|@(su|mo|tu|we|th|fr|sa)*) ]]||{
			syntax "bad interval"
			continue
		  }
		do-execute $when "$cmd" "$as"
	done
}

function main {
	local job_file username
	do-one-plan-b <$JOBF # main file
	set -- /home/*/.$JOBFNAME
	[[ $1 == /home/\*/.$JOBFNAME ]]&& return
	for job_file; do
		username=${job_file#/home/}
		username=${username%/."$JOBFNAME"}
		do-one-plan-b $username <$job_file # user file
	done
}

# Some shells read one line at a time. Putting main and exit on the same 
# line ensures that those shells exit after running main and don't 
# continue reading from a file that was changed out from under them if 
# this file is edited during a run.
main; exit $ERRS

# Copyright (C) 2017 by Tom Davis <tom@greyshirt.net>.
# vim: ft=ksh
