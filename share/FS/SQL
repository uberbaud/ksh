# <@(#)tag:csongor.greyshirt.net,2017-10-13:tw/01.47.44z/8c58de>
# vim: filetype=ksh tabstop=4 textwidth=72 noexpandtab nowrap

#: FUNCTION ^[^USQL_statement(s)^u^] ^= sqlreply
#:   Passes ^USQL statment^u to an ^Isqlite3^i co-process and returns 
#:     the result in the array ^O$^o^Vsqlreply^v. If no ^USQL statement^u
#:     parameter is given, it will be read from ^Sstdin^s.
#:   If there is not already an ^Isqlite3^i co-process running:
#:     1) Starts the co-process,
#:     2) Sets the array ^O$^o^VSQLFD^v to the co-process file 
#:        descriptors and marks it as ^Breadonly^b,
#:     3) Sets and marks as ^Breadonly^b ^O$^o^VSQLSEP^v (the field 
#:        separator) to ^O\^o^S034^s if it is not already set, and
#:     4) Sets ^O$^o^VSQLPID^v to the process id of the ^Isqlite3^i 
#:        co-process instance and marks it as ^Breadonly^b.
#:
#: FUNCTION respects the variables
#:   ^O$^o^VSQL_AUTODIE^v (^Ttrue^t, ^Twarn^t, or ^Tfalse^t). Defaults to ^Ttrue^t.
#:   ^O$^o^VSQL_VERBOSE^v (^Ttrue^t or ^Tfalse^t). Defaults to ^O${^o^Vverbose^v^O:-^o^Tfalse^t^O}^o.
#:
#: ^GSee also: ^BSQLify^b, ^Bsql-reply^b, and ^Bsql-fields^b^g
#: ^GNote:^g FUNCTION ^Gdelineates ^Isqlite3^i responses with a line consisting
#:       solely of ^O\^o^S007^s^O\^o^S007^s^O\^o^S007^s ^G(three bells). Consequently,
#:       if an ^Isqlite3^i ^Gresponse contains such a line, it will 
#:       cause^g FUNCTION ^Gto lose its place.^g

needs add-exit-actions coproc-w-fds die get-unused-fds sqlite3 warn
function SQL {
	local sql response READY verbose autodie autowarn
	READY='\007\007\007' # three bells
	verbose=${SQL_VERBOSE:-${verbose:-false}}
	autodie=${SQL_AUTODIE:-true}
	autowarn=false
	[[ $autodie == ?(true|false|warn) ]]|| {
		warn '^BSQL_AUTODIE^b is set incorrectly (^O$^o^Vautodie^v).' \
			 'Resetting ^BAUTODIE^b to ^Btrue^b.'
		autodie=true
	  }
	[[ $autodie == warn ]]&& { autodie=false; autowarn=true; }

	(($#))&& sql="$*" || sql=$(</dev/stdin)
	((${SQLFD[0]:-}))|| { # BEGIN CO-PROCESS START-UP
		readonly SQLSEP=${SQLSEP:-"$(print '\034')"} # ^\ -> field separator
		get-unused-fds 2 SQLFD
		readonly SQLFD
		coproc-w-fds ${SQLFD[0]} ${SQLFD[1]}	\
			sqlite3 -noheader -batch -list -separator "$SQLSEP"
		readonly SQLPID=$!

		add-exit-actions "(trap '' PIPE; print -u${SQLFD[1]} '.quit')"
		# clear the SQLite3 init output
		print -ru${SQLFD[1]} 'PRAGMA foreign_keys = ON;'
		print -ru${SQLFD[1]} "SELECT '$READY';" ||
			die 'Could not print to ^SSQLFD^s.'
		while :; do
			read -ru${SQLFD[0]} response ||
				die 'Could not read from ^SSQLFD^s.'
			[[ $response == $READY ]]&& break
		done
	  } # END CO-PROCESS START-UP
	$verbose && print -ru2 -- "SQL> $sql"
	print -ru${SQLFD[1]} -- "$sql"
	print -ru${SQLFD[1]} -- ";"
	print -ru${SQLFD[1]} -- "SELECT '$READY';"
	integer i=0
	set -A sqlreply --
	while :; do
		read -ru${SQLFD[0]} response ||
			die 'Could not read from ^SSQLFD^s.'
		[[ $response == $READY ]]&& break
		sqlreply[i++]=$response
		$verbose && print -ru2 -- "$response"
	done

	[[ -z ${sqlreply:-} ]]&& return
	[[ $sqlreply == Error:* || $sqlreply == 'Parse error near '* ]]||
		return 0

	sqlreply[i]="$sql"
	$autodie	&& die	"${sqlreply[@]}"
	$autowarn	&& warn	"${sqlreply[@]}"
	return 1
}

# Copyright © 2017 by Tom Davis <tom@greyshirt.net>.
