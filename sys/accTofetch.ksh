#!/bin/ksh
# <@(#)tag:csongor.greyshirt.net,2017-08-07:tw/18.38.44z/cbb1b7>
# vim: filetype=ksh tabstop=4 textwidth=72 noexpandtab nowrap

: ${FPATH:?Run from within KSH}

# Usage {{{1
typeset -- this_pgm="${0##*/}"
function usage {
	desparkle "$this_pgm"
	PGM="$REPLY"
	sparkle >&2 <<-\
	===SPARKLE===
	^F{4}Usage^f: ^T${PGM}^t ^[^Uacct pattern^u^]
	         Parses an essentially ^BDOSINI^b style file (^Uaccounts^u), and
			 produces ^Ufetchmailrc^u file to check matching accounts.
			 If no ^Uacct regex^u is given, ^Ufetchmailrc^u will contain
			 ^Ball^b accounts in ^Uaccounts^u.
	       ^T${PGM} -h^t
	         Show this help message.
	===SPARKLE===
	exit 0
} # }}}
# process -options {{{1
function bad_programmer {	# {{{2
	die 'Programmer error:'	\
		"  No getopts action defined for [1m-$1[22m."
  };	# }}}2
while getopts ':h' Option; do
	case $Option in
		h)	usage;													;;
		\?)	die "Invalid option: [1m-$OPTARG[22m.";				;;
		\:)	die "Option [1m-$OPTARG[22m requires an argument.";	;;
		*)	bad_programmer "$Option";								;;
	esac
done
# remove already processed arguments
shift $(($OPTIND - 1))
# ready to process non '-' prefixed arguments
# /options }}}1
function warnOrDie { #{{{1
	case $warnOrDie in
		die)  die "$@" 'Use [1m-f22m to force an edit.';		;;
		warn) warn "$@";											;;
		*)    die '[1mProgrammer error[22m:' \
					'warnOrDie is [1m${warnOrDie}[22m.';		;;
	esac
} # }}}1

for p; do
	[[ $p == *\'* ]]&& die 'patterns can not contain a single quote'
done
(($#))|| set -- '*'

newhost=true
mailhost='-'
usr=''
pass=''
FETCH_CONFIG_HOME="${XDG_CONFIG_HOME:?}"/fetchmail
[[ -d $FETCH_CONFIG_HOME ]]||
	die "No such directory [1m$FETCH_CONFIG_HOME[22m."

rc=$FETCH_CONFIG_HOME/fetchmailrc
rm -f $rc

exec 3>&1 1>$rc
cat <<----
	# Configuration file generated by ${0##*/}
	#  on $(date +'%Y-%m-%d %H:%M:%S %z')
	#### EDIT $FETCH_CONFIG_HOME/accounts to alter this file

	set idfile "$FETCH_CONFIG_HOME/fetchids"
	set postmaster "$(id -nu)"
	set softbounce
	---

TAB='	'

splitstr NL "$(<$FETCH_CONFIG_HOME/accounts)" acctlns
for ln in "${acctlns[@]}"; do
	[[ -z $ln ]]&&					continue	# empty
	[[ $ln == *([ $TAB]) ]]&&		continue	# blank lines
	[[ $ln == *([ $TAB])\;* ]]&&	continue	# comments
	[[ $ln == '['*']' ]]&& {					# server name
		mailhost="${ln#\[}"; mailhost="${mailhost%\]}"
		newhost=true
		opts=''
		continue
	  }
	[[ $ln == opts=* ]]&& {						# KLUDGE/opts
		opts="${ln#opts=\"}"
		opts="${opts%\"}"
		continue
	  }
	usr="${ln%%=*}"
	for p; do
		eval '[[ $usr == '"$p"' ]]' || continue
		$newhost && {
			printf '\npoll %s protocol imap\n' "$mailhost"
			newhost=false
		  }
		pass="${ln#*=}"
		# FETCHMAIL doesn't parse quotes well
		if [[ $pass == *\'* ]]; then
			[[ $pass == *\"* ]]&& {
				warn "$mailhost//$usr contains ' and \". Skipping."
				continue 2
			  }
			pass="\"$pass\""
		else
			pass="'$pass'"
		fi
		printf '\tusername '\''%s'\''\n' "$usr"
		printf '\t\tpassword %s\n' "$pass"
		[[ -n $opts ]]&& printf '\t\t%s\n' $opts
		printf '\t\tmda "/usr/local/mmh/bin/rcvstore +inbox"\n'
	done
done

printf '\n# \166im\072 ts=4 ft=conf nowrap\n'
exec 1>&3 3>&-
chmod 0400 $rc

# Copyright (C) 2017 by Tom Davis <tom@greyshirt.net>.
