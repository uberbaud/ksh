# <@(#)tag:csongor.greyshirt.net,2017-08-15:tw/04.06.15z/13ea47f>
# vim: filetype=ksh tabstop=4 textwidth=72 noexpandtab

#: FUNCTION ^[^T-fn^t^] ^[^T-e^t ^Uenvfile^u^] ^U/path/shell^u
#:   Give a clean shell experience.
#:     ^T-e^t  Use ^Uenvfile^u instead of .config/^Ushell^u.
#:     ^T-f^t  Force even if it's not recognized shell.
#:     ^T-n^t  Don't set or export ^SENV^s.

needs getent readlink /usr/bin/env
function reshell {
	local k keepvars s setenvs v x force=false doenv=true useenv ENV
	set -A keepvars	FCEDIT HOME TERM USER		\
					DISPLAY WINDOWID WINDOWPATH	\
					SSH_AGENT_PID SSH_AUTH_SOCK	\
					LC_ALL LC_COLLATE LC_CTYPE	\
					LC_MESSAGES LC_MONETARY		\
					LC_NUMERIC LC_TIME LANG		\
					LD_LIBRARY_PATH NLSPATH
	while getopts ':e:fn' Opt; do
		case $Opt in
			e)	useenv="$OPTARG";									;;
			f)	force=true;											;;
			n)	doenv=false;										;;
			\?)	die "Invalid option: ^B-$OPTARG^b.";				;;
			\:)	die "Option ^B-$OPTARG^b requires an argument.";	;;
			*)	die "Bad programmer.";								;;
		esac
	done
	shift $((OPTIND-1))

	(($#))|| die 'Missing required argument ^Bshell^b'
	desparkle "$1"; sD="$REPLY"
	if $force; then
		s="$(readlink -fn "$1")"
		[[ -n $s ]]|| die "^B$sD^b does not exist."
		[[ -f $s ]]|| die "^B$sD^b is not a file."
		[[ -x $s ]]|| die "^B$sD^b is not executable."
	else
		s=$(getent shells $(which "$1"))
		[[ -n $s ]]|| die "^B$sD^b is not a recognized shell."
	fi
	shift
	REPLY=''

	$doenv && {
		ENV="${useenv:-"${XDG_CONFIG_HOME:-$HOME/.config}/${s##*/}/env"}"
		[[ -f $ENV ]]&& {
			ENV=$(readlink -fn $ENV)
			if [[ -f $ENV ]]; then
				keepvars[${#keepvars[*]}]=ENV
			else
				warn '^Benv^b exists but links to a non-existent file.'
			fi
		  }
	  }

	set -A setenvs -- SHELL="$s"
	for k in "${keepvars[@]}"; do
		eval v=\$k
		[[ -n $v ]]&& setenvs[${#setenvs[*]}]="$k=$v"
	done

	COLUMNS=$(tput cols)
	# we're entering the new shell so let the user know
	printf "\e[1;43;37m%${COLUMNS}s\r = %s =\e[0m\n" '' "$s" # banner

	/usr/bin/env -i "${setenvs[@]}" "$s" -l "$@"

	# when we're done, let the user know
	printf "\e[1;43;37m%${COLUMNS}s\r = %s =\e[0m\n" '' "$SHELL" # banner
}

# Copyright Â© 2017 by Tom Davis <tom@greyshirt.net>.
