# <@(#)tag:tw.csongor.greyshirt.net,2022-06-28,21.59.55z/2963375>
# vim: filetype=ksh tabstop=4 textwidth=72 noexpandtab

#: FUNCTION ^[^UYear^u ^Umonth^u ^Uday^u ^Uhour^u ^Uminute^u ^[^Usecond^u^]^]
#:   Prints a very compact form of ^Ilocal now^i or the given time using one
#:   character per ^UYmd-HMS^u translated to ^[^Tz1^t^O-^o^T9a^t^O-^o^Ty^t^] without ^Tj^t, ^To^t, or ^Tu^t.
#:
#:   ^BYear^b modulo 32, ^Bmonth^b ^Ta^t^-^Tm^t (no ^Tj^t), ^Bday^b ^T1^t^-^Ty^t (no ^Tj^t, ^To^t, or ^Tu^t)
#:   ^BHour^b ^Tz^t-p, ^BMinutes^b resolution of 2, ^Bseconds^b plus the missing minute but
#:   only a resolution of 4 seconds.
#: ^GExample: ^I2022-06-28 19:24:10 EDT^i^g ^= ^G^i6fw-kc2^i^g


needs bad-programmer date
function compact-timestamp {
	local y m d H M S zVar TMSTMP ARGV
	typeset -i10 i=0 atoms=0
	ARGV=
	set -A t -- z 1 2 3 4 5 6 7 8 9 a b c d e f g h i k l m n p q r s t v w y
	case $# in
		0)
			TMSTMP=
			;;
		5|6)
			ARGV=
			for zVar; do
				((i++))
				[[ $zVar == +([0-9]) ]]|| ARGV="$ARGV $i"
			done
			[[ -n $ARGV ]]&& {
				local s=s v=are a= d=
				a=${ARGV%??}
				ARGV=${ARGV#"$a"}
				[[ -z $a ]]&&
					{ s=; v=is; d=an; }
				die "Argument$s ${a:+${a# } and }${ARGV# } $v not ${d:+$d }integer$s."
			  }
			ARGV="$1-$2-$3 $4:$5${6:+:$6}"
			typeset -R4 zVar
			zVar=0000$1;	y=$zVar
			typeset -R2 zVar
			zVar=00$2;		m=$zVar
			zVar=00$3;		d=$zVar
			zVar=00$4;		H=$zVar
			zVar=00$5;		M=$zVar
			[[ -n ${6:-} ]]&& { zVar=00$6; S=$zVar; }
			TMSTMP=$y$m$d$H$M${S:+.$S}
			;;
		*)
			TMSTMP="Expected five (5) or six (6) args:"
			TMSTMP="$TMSTMP ^Uy^u ^Um^u ^Ud^u ^UH^u ^UM^u ^[^US^u^]."
			bad-programmer "$TMSTMP"
			;;
	esac
	set -- $(date -j +'%Y %m %e %k %M %S' $TMSTMP) ||
		die "Bad date ^B$ARGV^b ^= ^B$TMSTMP^b."
	atoms=${#t[*]}
	y=${t[(${1#0}%atoms)]}	# year modulo sizeof t array
	m=${t[(${2#0}+9)]}	# month - 1 + 10, zeroify but only use letters
	d=${t[(${3#0}+1)]}	# day of month +1 is less than or equal to 32
	H=${t[(${4})]}		# hours fits into 32 slots
	i=${5#0}			# minutes without zero (0) prefix
	M=${t[(i/2)]}		# minutes could be 0-59, so use resolution of 2 minutes
	# Add the extra minute resolution as possibly 60 seconds to the seconds
	i=$((${6#0}+((i%2)*60)))
	S=${t[(i/4)]}		# i could be 0-120 (because of leap seconds),
						#   so use resolution of four (4) seconds.
	print -r -- "$y$m$d-$H$M$S"
}

# Copyright Â© 2022 by Tom Davis <tom@greyshirt.net>.
