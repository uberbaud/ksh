# <@(#)tag:csongor.greyshirt.net,2017-10-13:tw/01.47.44z/8c58de>
# vim: filetype=ksh tabstop=4 textwidth=72 noexpandtab nowrap

#: FUNCTION ^[^USQL_statement(s)^u^] ^= sqlreply
#:   Co-processicize sqlite3 and sugar the interaction. If no SQL statement
#:     is given on the command line, reads it from ^Sstdin^s.
#:   Starts the co-process if it isn't already going.
#:   Sets array ^S$SQLFD^s to the co-process file descriptors.
#:   Exports ^S$SQLSEP^s as field separator, but uses user set value if
#:     it's set before the initial call to SQL.
#:   Uses ^S$SQL_AUTODIE^s (^Itrue^i, ^Iwarn^i, or ^Ifalse^i). Defaults to ^Itrue^i.
#:   Uses ^S$SQL_VERBOSE^s (^Itrue^i or ^Ifalse^i). Defaults to ^S${verbose:-^s^Nfalse^n^S}^s.
#:   ^NSee also: SQLify^n

needs sqlite3
function SQL {
	local sql response READY='\007\007\007' # three bells
	local verbose="${SQL_VERBOSE:-${verbose:-false}}"
	local autodie="${SQL_AUTODIE:-true}" autowarn=false
	[[ $autodie == ?(true|false|warn) ]]|| {
		warn '^BSQL_AUTODIE^b is set incorrectly (^S$autodie^s).' \
			 'Resetting ^BAUTODIE^b to ^Btrue^b.'
		autodie=true
	  }
	[[ $autodie == warn ]]&& { autodie=false; autowarn=true; }

	SQLSEP="${SQLSEP:-"$(print '\034')"}" # ^\ -> field separator
	(($#))&& sql="$*" || sql="$(</dev/stdin)"
	set -A sqlreply --
	((${SQLFD[0]:-}))|| {
		sqlite3 -noheader -batch -list -separator "$SQLSEP" 2>&1 |&
		nextfd || die 'No available file descriptor.'; SQLFD[0]="$REPLY"
		eval "exec ${SQLFD[0]}<&p"
		nextfd || die 'No available file descriptor.'; SQLFD[1]="$REPLY"
		eval "exec ${SQLFD[1]}>&p"
		add-exit-action "print -u${SQLFD[1]} '.quit'"
		# clear the SQLite3 init output
		print -ru${SQLFD[1]} "SELECT '$READY';" ||
			die 'Could not read from ^SSQLFD^s.'
		while :; do
			read -ru${SQLFD[0]} response
			[[ $response == $READY ]]&& break
		done
	  }
	$verbose && print -ru2 -- "SQL> $sql"
	print -ru${SQLFD[1]} -- "$sql"
	print -ru${SQLFD[1]} -- ";"
	print -ru${SQLFD[1]} -- "SELECT '$READY';"
	integer i=0
	while :; do
		read -ru${SQLFD[0]} response
		[[ $response == $READY ]]&& break
		sqlreply[i++]="$response"
		$verbose && print -ru2 -- "$response"
	done

	[[ ${sqlreply[0]:-} == Error:* ]]&& {
		sqlreply[i]="$sql"
		$autodie && die "${sqlreply[@]}"
		$autowarn && warn "${sqlreply[@]}"
		return 1
	  }
	return 0
}

# Copyright Â© 2017 by Tom Davis <tom@greyshirt.net>.
