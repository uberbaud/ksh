^BSQLite Date and Time Functions^b

^BCOMMANDS^b
    ^Tdate^t^O(^o^[^Utime-value^u^[^O,^o ^Umodifier^u^[^O,^o^S…^s^]^]^]^O)^o
    ^Ttime^t^O(^o^[^Utime-value^u^[^O,^o ^Umodifier^u^[^O,^o^S…^s^]^]^]^O)^o
    ^Tdatetime^t^O(^o^[^Utime-value^u^[^O,^o ^Umodifier^u^[^O,^o^S…^s^]^]^]^O)^o
    ^Tjulianday^t^O(^o^[^Utime-value^u^[^O,^o ^Umodifier^u^[^O,^o^S…^s^]^]^]^O)^o
    ^Tunixepoch^t^O(^o^[^Utime-value^u^[^O,^o ^Umodifier^u^[^O,^o^S…^s^]^]^]^O)^o
    ^Tstrftime^t^O(^o^Uformat^u^O,^o^[^Utime-value^u^[^O,^o ^Umodifier^u^[^O,^o^S…^s^]^]^]^O)^o

^BOUTPUT^b
    ^Tdate^t^O()^o ^S->^s ^Btext^b
        YYYY-MM-DD
    ^Ttime^t^O()^o ^S->^s ^Btext^b
        HH:MM:SS
    ^Tdatetime^t^O()^o ^S->^s ^Btext^b
        YYYY-MM-DD HH:MM:SS
    ^Tjulianday^t^O()^o ^S->^s ^Breal^b
        days since 4714 BC Nov 24 12pm GMT Proleptic Gregorian
    ^Tunixepoch^t^O()^o ^S->^s ^Binteger^b
        seconds since 1970-01-01 00:00:00 UTC
    ^Tstrftime^t^O()^o ^S->^s ^Btext^b
        ^T%d^t   day of month: 00
        ^T%f^t   fractional seconds: SS.SSS
        ^T%H^t   hour: 00-24
        ^T%j^t   day of year: 001-366
        ^T%J^t   Julian day number (fractional)
        ^T%m^t   month: 01-12
        ^T%M^t   minute: 00-59
        ^T%s^t   seconds since 1970-01-01
        ^T%S^t   seconds: 00-59
        ^T%w^t   day of week 0-6 with Sunday==0
        ^T%W^t   week of year: 00-53
        ^T%Y^t   year: 0000-9999
        ^T%%^t   ^T%^t

^BTIME VALUES^b
    YYYY-MM-DD ^[HH:MM^[:SS^[.SSS^]^]^]^[TZ^]
    YYYY-MM-DD^TT^t^[HH:MM^[:SS^[.SSS^]^]^]^[TZ^]
    HH:MM^[:SS^[.SSS^]^]^[TZ^]    ^GAssumes date of 2000-01-01^g
    now                     ^GUTC, one value per sqlite3_step()^g
    DDDDDDDDDD              ^GJulian day, ^BOR^b epoch if next modifier is 
                            ^g^Tauto^t ^Gor^g ^Tunixepoch^t^G.^g
        TZ ^Gis^g ^[^G+-^g^]^GHH:MM or^g ^TZ^t

^BMODIFIERS^b
    NNN ^{^Tdays^t^|^Thours^t^|^Tminutes^t^|^Tmonths^t^|^Tyears^t^}
    NNN.NNNN ^Tseconds^t
        Adds that amount of time. The trailing ^Ts^t is optional.
    ^Tstart of^t ^{^Tmonth^t^|^Tyear^t^|^Tday^t^}
        Shifts backward.
    ^Tweekday^t N
        Advances if necessary. Sunday is 0.
    ^Tunixepoch^t^|^Tjulianday^t^|^Tauto^t^|^Tlocaltime^t^|^Tutc^t
        Must follow ^Utime-value^u and for the first three, indicates how 
        that should be interpreted or in the case of last two, assumes the 
        opposite and converts. ^Tauto^t selects ^Tunixepoch^t or 
        ^Tjulianday^t based on magnitude. For the first 63 days of 1970 will 
        choose julian.

^BCAVEATS AND BUGS^b
    The computation of local time depends heavily on the whim of politicians 
    and is thus difficult to get correct for all locales. In this 
    implementation, the standard C library function localtime_r() is used to 
    assist in the calculation of local time. The localtime_r() C function 
    normally only works for years between 1970 and 2037. For dates outside 
    this range, SQLite attempts to map the year into an equivalent year 
    within this range, do the calculation, then map the year back.

    These functions only work for dates between 0000-01-01 00:00:00 and 
    9999-12-31 23:59:59 (julian day numbers 1721059.5 through 
    5373484.5). For dates outside that range, the results of these functions 
    are undefined.

    All internal computations assume the Gregorian calendar system. They 
    also assume that every day is exactly 86400 seconds in duration; no leap 
    seconds are incorporated.
