# <@(#)tag:tw.csongor.greyshirt.net,2022-06-20,04.11.35z/23859be>
# vim: filetype=ksh tabstop=4 textwidth=72 noexpandtab

#: FUNCTION ^G(no arguments)^g
#:   Prints variables from initial multiline header on ^SSTDIN^s in
#:       ^Ishell^i assignment form, with a final line ^Texport^ting them.

needs show-bad-packages bad-programmer
function get-header-vars {
	local SpTab line key val
	[[ -t 0 ]]&& die "Expected a ^BC^b source code file on ^SSTDIN^s."
	SpTab=' 	'

	set -- $(typeset +t)
	[[ -n ${1:-} ]]&& {
		bad-programmer \
			"Var(s) ^V$*^v is/are tagged."			\
			'Cannot untag them locally'				\
			'Use'									\
			"    ^Ttypeset +t \$(typeset +t)^t"		\
			"to remove tag before calling ^B$0^b."
	  }

	IFS=$SpTab read -r line || die "Bad read on ^SSTDIN^s."
	[[ $line == /\** ]]|| die \
			"In order to ^Bget^b and ^Bset^b variables, the first line"	\
			"^BMUST^b be the opening of a multi-line comment, but it"	\
			"isn't."

	# process header for variables
	while :; do
		[[ $line == *\*/* ]]&& break # end of comment
		[[ $line == [A-Za-z_]*([A-Za-z0-9_])*([$SpTab])?(+)=* ]]&& {
			# There's an equals sign, we tested. That's how we're here.
			key=${line%%=*}
			val=${line##"$key="*([$SpTab])}
			if [[ $key == *+ ]]; then
				key=${key%%*([$SpTab])+}
				eval val="\${$key:+\$$key }\$val"
			else
				key=${key%%*([$SpTab])}
			fi
			typeset -t $key="$val"
		  }
		# next line
		IFS=$SpTab read -r line || break
	done
	[[ -n $(typeset +t) ]]||
		return 0 # no variables were set, but that's not an error

	[[ -n $PACKAGES ]]&& {
		eval PACKAGES="\"$PACKAGES\""
		pkg-config --exists $PACKAGES || show-bad-packages "$PACKAGES"
		typeset -t CFLAGS="${CFLAGS:+$CFLAGS }$(pkg-config --cflags $PACKAGES)"
		typeset -t LDFLAGS="${LDFLAGS:+$LDFLAGS }$(pkg-config --libs $PACKAGES)"
	  }

	[[ -n ${OPATH:-} ]]&& eval OPATH=$OPATH
	OPATH=${OPATH:+$OPATH/}
	local o
	for o in ${OBJS:-}; do
		eval o="\"$o\""
		o=$OPATH$o
		needs-file -or-warn "$o" &&
			typeset -t LDLIBS="${LDLIBS:+$LDLIBS }$o"
	done
	typeset +t OBJS OPATH PACKAGES

	set -- $(typeset +t)
	for key; do
		eval val=\$$key
		gsub '"' '\"' "$val" val
		eval val="\"$val\""
		shquote "$val" val
		print -r -- "$key=$val;"
	done
	print -r -- "VARLIST='$*';"
}

# Copyright Â© 2022 by Tom Davis <tom@greyshirt.net>.
