# <@(#)tag:tw.csongor.greyshirt.net,2020-12-04,14.34.08z/3bbe5f3>
# vim: filetype=ksh tabstop=4 textwidth=72 noexpandtab

#: FUNCTION ^[^Uv.ksh_options^u^] ^[^Ufile_name^u^]
#:   Wrapper to allow alias processing.

needs find-function resolve-alias shquote in-new-term
function f-v {
	local o opts i=0 cmdexp filexp edit ecmd
	edit=$HOME/bin/ksh/v

	# NO parameters, so short circuit all the others
	(($#))|| { \in-new-term "$edit"; return; }

	for o; do
		[[ $1 == -* ]]|| break
		opts[i++]=$1
		shift
	done

	# no file to exit, so -h or -v?
	(($#))|| { "$edit" "${opts[@]}" && return; }

	filexp=$1
	(($#))&& shift
	# ZSH inspired =word -> $(which word)
	[[ $filexp == =* && ! -f $filexp ]]&& {
		filexp=${filexp#=}
		cmdexp=$(command -v "$filexp") ||
			die "Could not resolve ^B$filexp^b."
		if [[ $cmdexp == alias\ * ]]; then
			filexp=$(resolve-alias "$filexp")
		else
			filexp=$cmdexp
		fi
		# If we're here, we've resolve a function or executabl, and
		# if it's an executable, we've been given the full path, so
		# if it doesn't start with '/', it's a function, so find the
		# path.
		[[ $filexp != /* ]]&&
			filexp=$(find-function "$filexp")
	  }
	# Perl modules in $USR_PLIB
	[[ $filexp == *::* && -n ${USR_PLIB:-} ]]&& {
		local F
		gsub :: / "$filexp" F
		F=$USR_PLIB/$F.pm
		[[ -f $F ]]&& filexp=$F
	  }
	set -- in-new-term "$edit" ${opts[*]:+"${opts[@]}"} "$filexp" "$@"
	# remove in-new-term if there's no WINDOWID
	[[ -n ${WINDOWID:-} ]]|| shift
	"$@"
}

# Copyright Â© 2020 by Tom Davis <tom@greyshirt.net>.
